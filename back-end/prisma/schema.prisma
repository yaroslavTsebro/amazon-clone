// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  email      String  @unique
  password   String
  avatarPath String  @default("/uploads/default-avatar.png")
  name       String?
  phone      String  @default("")

  orders    Order[]
  reviews   Review[]
  favorites Product[]
}

model Product {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name        String   @unique
  slug        String   @unique
  description String
  price       Int
  images      String[]

  orderItems OrderItem[]
  reviews    Review[]
  category   Category?   @relation(fields: [categoryId], references: [id])
  categoryId Int?
  user       User?       @relation(fields: [userId], references: [id])
  userId     Int?
}

model Order {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  status EnumOrderStatus @default(PENDING)
  items  OrderItem[]
  User   User            @relation(fields: [userId], references: [id])
  userId Int
}

enum EnumOrderStatus {
  PAYED
  PENDING
  SHIPPED
  DELIVERED
}

model OrderItem {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  quantity Int
  price    Int

  order   Order? @relation(fields: [orderId], references: [id])
  orderId Int?   @map("order_id")

  product   Product @relation(fields: [productId], references: [id])
  productId Int     @map("product_id")
}

model Category {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name     String    @unique
  slug     String    @unique
  products Product[]
}

model Review {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  rating Int
  text   String

  user   User @relation(fields: [userId], references: [id])
  userId Int

  product   Product @relation(fields: [productId], references: [id])
  productId Int
}
